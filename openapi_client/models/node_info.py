# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform

    The version of the OpenAPI document: 0.24.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr
from pydantic import Field
from openapi_client.models.plugin_info import PluginInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class NodeInfo(BaseModel):
    """
    NodeInfo
    """ # noqa: E501
    node_name: Optional[StrictStr] = Field(default=None, alias="nodeName")
    boot_time: Optional[datetime] = Field(default=None, alias="bootTime")
    last_updated_date: Optional[datetime] = Field(default=None, alias="lastUpdatedDate")
    kb_version: Optional[StrictStr] = Field(default=None, alias="kbVersion")
    api_version: Optional[StrictStr] = Field(default=None, alias="apiVersion")
    plugin_api_version: Optional[StrictStr] = Field(default=None, alias="pluginApiVersion")
    common_version: Optional[StrictStr] = Field(default=None, alias="commonVersion")
    platform_version: Optional[StrictStr] = Field(default=None, alias="platformVersion")
    plugins_info: Optional[List[PluginInfo]] = Field(default=None, alias="pluginsInfo")
    __properties: ClassVar[List[str]] = ["nodeName", "bootTime", "lastUpdatedDate", "kbVersion", "apiVersion", "pluginApiVersion", "commonVersion", "platformVersion", "pluginsInfo"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of NodeInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in plugins_info (list)
        _items = []
        if self.plugins_info:
            for _item in self.plugins_info:
                if _item:
                    _items.append(_item.to_dict())
            _dict['pluginsInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of NodeInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "nodeName": obj.get("nodeName"),
            "bootTime": obj.get("bootTime"),
            "lastUpdatedDate": obj.get("lastUpdatedDate"),
            "kbVersion": obj.get("kbVersion"),
            "apiVersion": obj.get("apiVersion"),
            "pluginApiVersion": obj.get("pluginApiVersion"),
            "commonVersion": obj.get("commonVersion"),
            "platformVersion": obj.get("platformVersion"),
            "pluginsInfo": [PluginInfo.from_dict(_item) for _item in obj.get("pluginsInfo")] if obj.get("pluginsInfo") is not None else None
        })
        return _obj


