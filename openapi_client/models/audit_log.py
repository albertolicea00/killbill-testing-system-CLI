# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform

    The version of the OpenAPI document: 0.24.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.entity import Entity
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class AuditLog(BaseModel):
    """
    AuditLog
    """ # noqa: E501
    change_type: Optional[StrictStr] = Field(default=None, alias="changeType")
    change_date: Optional[datetime] = Field(default=None, alias="changeDate")
    object_type: Optional[StrictStr] = Field(default=None, alias="objectType")
    object_id: Optional[StrictStr] = Field(default=None, alias="objectId")
    changed_by: Optional[StrictStr] = Field(default=None, alias="changedBy")
    reason_code: Optional[StrictStr] = Field(default=None, alias="reasonCode")
    comments: Optional[StrictStr] = None
    user_token: Optional[StrictStr] = Field(default=None, alias="userToken")
    history: Optional[Entity] = None
    __properties: ClassVar[List[str]] = ["changeType", "changeDate", "objectType", "objectId", "changedBy", "reasonCode", "comments", "userToken", "history"]

    @field_validator('object_type')
    def object_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ACCOUNT', 'ACCOUNT_EMAIL', 'BLOCKING_STATES', 'BUNDLE', 'CUSTOM_FIELD', 'INVOICE', 'PAYMENT', 'TRANSACTION', 'INVOICE_ITEM', 'INVOICE_PAYMENT', 'SUBSCRIPTION', 'SUBSCRIPTION_EVENT', 'SERVICE_BROADCAST', 'PAYMENT_ATTEMPT', 'PAYMENT_METHOD', 'TAG', 'TAG_DEFINITION', 'TENANT', 'TENANT_KVS'):
            raise ValueError("must be one of enum values ('ACCOUNT', 'ACCOUNT_EMAIL', 'BLOCKING_STATES', 'BUNDLE', 'CUSTOM_FIELD', 'INVOICE', 'PAYMENT', 'TRANSACTION', 'INVOICE_ITEM', 'INVOICE_PAYMENT', 'SUBSCRIPTION', 'SUBSCRIPTION_EVENT', 'SERVICE_BROADCAST', 'PAYMENT_ATTEMPT', 'PAYMENT_METHOD', 'TAG', 'TAG_DEFINITION', 'TENANT', 'TENANT_KVS')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AuditLog from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of history
        if self.history:
            _dict['history'] = self.history.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of AuditLog from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "changeType": obj.get("changeType"),
            "changeDate": obj.get("changeDate"),
            "objectType": obj.get("objectType"),
            "objectId": obj.get("objectId"),
            "changedBy": obj.get("changedBy"),
            "reasonCode": obj.get("reasonCode"),
            "comments": obj.get("comments"),
            "userToken": obj.get("userToken"),
            "history": Entity.from_dict(obj.get("history")) if obj.get("history") is not None else None
        })
        return _obj


