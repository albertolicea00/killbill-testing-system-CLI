# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform

    The version of the OpenAPI document: 0.24.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr
from pydantic import Field
from openapi_client.models.plugin_service_info import PluginServiceInfo
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PluginInfo(BaseModel):
    """
    PluginInfo
    """ # noqa: E501
    bundle_symbolic_name: Optional[StrictStr] = Field(default=None, alias="bundleSymbolicName")
    plugin_key: Optional[StrictStr] = Field(default=None, alias="pluginKey")
    plugin_name: Optional[StrictStr] = Field(default=None, alias="pluginName")
    version: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    is_selected_for_start: Optional[StrictBool] = Field(default=None, alias="isSelectedForStart")
    services: Optional[List[PluginServiceInfo]] = None
    __properties: ClassVar[List[str]] = ["bundleSymbolicName", "pluginKey", "pluginName", "version", "state", "isSelectedForStart", "services"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PluginInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in services (list)
        _items = []
        if self.services:
            for _item in self.services:
                if _item:
                    _items.append(_item.to_dict())
            _dict['services'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PluginInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bundleSymbolicName": obj.get("bundleSymbolicName"),
            "pluginKey": obj.get("pluginKey"),
            "pluginName": obj.get("pluginName"),
            "version": obj.get("version"),
            "state": obj.get("state"),
            "isSelectedForStart": obj.get("isSelectedForStart"),
            "services": [PluginServiceInfo.from_dict(_item) for _item in obj.get("services")] if obj.get("services") is not None else None
        })
        return _obj


