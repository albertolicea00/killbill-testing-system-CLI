# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform

    The version of the OpenAPI document: 0.24.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.overdue_condition import OverdueCondition
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OverdueStateConfig(BaseModel):
    """
    OverdueStateConfig
    """ # noqa: E501
    name: Optional[StrictStr] = None
    is_clear_state: Optional[StrictBool] = Field(default=None, alias="isClearState")
    condition: Optional[OverdueCondition] = None
    external_message: Optional[StrictStr] = Field(default=None, alias="externalMessage")
    is_block_changes: Optional[StrictBool] = Field(default=None, alias="isBlockChanges")
    is_disable_entitlement: Optional[StrictBool] = Field(default=None, alias="isDisableEntitlement")
    subscription_cancellation_policy: Optional[StrictStr] = Field(default=None, alias="subscriptionCancellationPolicy")
    auto_reevaluation_interval_days: Optional[StrictInt] = Field(default=None, alias="autoReevaluationIntervalDays")
    __properties: ClassVar[List[str]] = ["name", "isClearState", "condition", "externalMessage", "isBlockChanges", "isDisableEntitlement", "subscriptionCancellationPolicy", "autoReevaluationIntervalDays"]

    @field_validator('subscription_cancellation_policy')
    def subscription_cancellation_policy_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('END_OF_TERM', 'IMMEDIATE', 'NONE'):
            raise ValueError("must be one of enum values ('END_OF_TERM', 'IMMEDIATE', 'NONE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OverdueStateConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of condition
        if self.condition:
            _dict['condition'] = self.condition.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OverdueStateConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "isClearState": obj.get("isClearState"),
            "condition": OverdueCondition.from_dict(obj.get("condition")) if obj.get("condition") is not None else None,
            "externalMessage": obj.get("externalMessage"),
            "isBlockChanges": obj.get("isBlockChanges"),
            "isDisableEntitlement": obj.get("isDisableEntitlement"),
            "subscriptionCancellationPolicy": obj.get("subscriptionCancellationPolicy"),
            "autoReevaluationIntervalDays": obj.get("autoReevaluationIntervalDays")
        })
        return _obj


