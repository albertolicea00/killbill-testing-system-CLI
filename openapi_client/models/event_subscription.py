# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform

    The version of the OpenAPI document: 0.24.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.audit_log import AuditLog
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EventSubscription(BaseModel):
    """
    EventSubscription
    """ # noqa: E501
    event_id: Optional[StrictStr] = Field(default=None, alias="eventId")
    billing_period: Optional[StrictStr] = Field(default=None, alias="billingPeriod")
    effective_date: Optional[datetime] = Field(default=None, alias="effectiveDate")
    catalog_effective_date: Optional[datetime] = Field(default=None, alias="catalogEffectiveDate")
    plan: Optional[StrictStr] = None
    product: Optional[StrictStr] = None
    price_list: Optional[StrictStr] = Field(default=None, alias="priceList")
    event_type: Optional[StrictStr] = Field(default=None, alias="eventType")
    is_blocked_billing: Optional[StrictBool] = Field(default=None, alias="isBlockedBilling")
    is_blocked_entitlement: Optional[StrictBool] = Field(default=None, alias="isBlockedEntitlement")
    service_name: Optional[StrictStr] = Field(default=None, alias="serviceName")
    service_state_name: Optional[StrictStr] = Field(default=None, alias="serviceStateName")
    phase: Optional[StrictStr] = None
    audit_logs: Optional[List[AuditLog]] = Field(default=None, alias="auditLogs")
    __properties: ClassVar[List[str]] = ["eventId", "billingPeriod", "effectiveDate", "catalogEffectiveDate", "plan", "product", "priceList", "eventType", "isBlockedBilling", "isBlockedEntitlement", "serviceName", "serviceStateName", "phase", "auditLogs"]

    @field_validator('billing_period')
    def billing_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('DAILY', 'WEEKLY', 'BIWEEKLY', 'THIRTY_DAYS', 'THIRTY_ONE_DAYS', 'SIXTY_DAYS', 'NINETY_DAYS', 'MONTHLY', 'BIMESTRIAL', 'QUARTERLY', 'TRIANNUAL', 'BIANNUAL', 'ANNUAL', 'SESQUIENNIAL', 'BIENNIAL', 'TRIENNIAL', 'NO_BILLING_PERIOD'):
            raise ValueError("must be one of enum values ('DAILY', 'WEEKLY', 'BIWEEKLY', 'THIRTY_DAYS', 'THIRTY_ONE_DAYS', 'SIXTY_DAYS', 'NINETY_DAYS', 'MONTHLY', 'BIMESTRIAL', 'QUARTERLY', 'TRIANNUAL', 'BIANNUAL', 'ANNUAL', 'SESQUIENNIAL', 'BIENNIAL', 'TRIENNIAL', 'NO_BILLING_PERIOD')")
        return value

    @field_validator('event_type')
    def event_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('START_ENTITLEMENT', 'START_BILLING', 'PAUSE_ENTITLEMENT', 'PAUSE_BILLING', 'RESUME_ENTITLEMENT', 'RESUME_BILLING', 'PHASE', 'CHANGE', 'STOP_ENTITLEMENT', 'STOP_BILLING', 'SERVICE_STATE_CHANGE'):
            raise ValueError("must be one of enum values ('START_ENTITLEMENT', 'START_BILLING', 'PAUSE_ENTITLEMENT', 'PAUSE_BILLING', 'RESUME_ENTITLEMENT', 'RESUME_BILLING', 'PHASE', 'CHANGE', 'STOP_ENTITLEMENT', 'STOP_BILLING', 'SERVICE_STATE_CHANGE')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EventSubscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in audit_logs (list)
        _items = []
        if self.audit_logs:
            for _item in self.audit_logs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['auditLogs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EventSubscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventId": obj.get("eventId"),
            "billingPeriod": obj.get("billingPeriod"),
            "effectiveDate": obj.get("effectiveDate"),
            "catalogEffectiveDate": obj.get("catalogEffectiveDate"),
            "plan": obj.get("plan"),
            "product": obj.get("product"),
            "priceList": obj.get("priceList"),
            "eventType": obj.get("eventType"),
            "isBlockedBilling": obj.get("isBlockedBilling"),
            "isBlockedEntitlement": obj.get("isBlockedEntitlement"),
            "serviceName": obj.get("serviceName"),
            "serviceStateName": obj.get("serviceStateName"),
            "phase": obj.get("phase"),
            "auditLogs": [AuditLog.from_dict(_item) for _item in obj.get("auditLogs")] if obj.get("auditLogs") is not None else None
        })
        return _obj


