# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform

    The version of the OpenAPI document: 0.24.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.audit_log import AuditLog
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class InvoiceItem(BaseModel):
    """
    InvoiceItem
    """ # noqa: E501
    invoice_item_id: StrictStr = Field(alias="invoiceItemId")
    invoice_id: Optional[StrictStr] = Field(default=None, alias="invoiceId")
    linked_invoice_item_id: Optional[StrictStr] = Field(default=None, alias="linkedInvoiceItemId")
    account_id: StrictStr = Field(alias="accountId")
    child_account_id: Optional[StrictStr] = Field(default=None, alias="childAccountId")
    bundle_id: Optional[StrictStr] = Field(default=None, alias="bundleId")
    subscription_id: Optional[StrictStr] = Field(default=None, alias="subscriptionId")
    product_name: Optional[StrictStr] = Field(default=None, alias="productName")
    plan_name: Optional[StrictStr] = Field(default=None, alias="planName")
    phase_name: Optional[StrictStr] = Field(default=None, alias="phaseName")
    usage_name: Optional[StrictStr] = Field(default=None, alias="usageName")
    pretty_product_name: Optional[StrictStr] = Field(default=None, alias="prettyProductName")
    pretty_plan_name: Optional[StrictStr] = Field(default=None, alias="prettyPlanName")
    pretty_phase_name: Optional[StrictStr] = Field(default=None, alias="prettyPhaseName")
    pretty_usage_name: Optional[StrictStr] = Field(default=None, alias="prettyUsageName")
    item_type: Optional[StrictStr] = Field(default=None, alias="itemType")
    description: Optional[StrictStr] = None
    start_date: Optional[date] = Field(default=None, alias="startDate")
    end_date: Optional[date] = Field(default=None, alias="endDate")
    amount: Optional[Union[StrictFloat, StrictInt]] = None
    rate: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = None
    quantity: Optional[Union[StrictFloat, StrictInt]] = None
    item_details: Optional[StrictStr] = Field(default=None, alias="itemDetails")
    catalog_effective_date: Optional[datetime] = Field(default=None, alias="catalogEffectiveDate")
    child_items: Optional[List[InvoiceItem]] = Field(default=None, alias="childItems")
    audit_logs: Optional[List[AuditLog]] = Field(default=None, alias="auditLogs")
    __properties: ClassVar[List[str]] = ["invoiceItemId", "invoiceId", "linkedInvoiceItemId", "accountId", "childAccountId", "bundleId", "subscriptionId", "productName", "planName", "phaseName", "usageName", "prettyProductName", "prettyPlanName", "prettyPhaseName", "prettyUsageName", "itemType", "description", "startDate", "endDate", "amount", "rate", "currency", "quantity", "itemDetails", "catalogEffectiveDate", "childItems", "auditLogs"]

    @field_validator('item_type')
    def item_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('EXTERNAL_CHARGE', 'FIXED', 'RECURRING', 'REPAIR_ADJ', 'CBA_ADJ', 'CREDIT_ADJ', 'ITEM_ADJ', 'USAGE', 'TAX', 'PARENT_SUMMARY'):
            raise ValueError("must be one of enum values ('EXTERNAL_CHARGE', 'FIXED', 'RECURRING', 'REPAIR_ADJ', 'CBA_ADJ', 'CREDIT_ADJ', 'ITEM_ADJ', 'USAGE', 'TAX', 'PARENT_SUMMARY')")
        return value

    @field_validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTN', 'BWP', 'BYR', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LTL', 'LVL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRO', 'MUR', 'MVR', 'MWK', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SPL', 'SRD', 'STD', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TVD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XDR', 'XOF', 'XPF', 'YER', 'ZAR', 'ZMW', 'ZWD', 'BTC'):
            raise ValueError("must be one of enum values ('AED', 'AFN', 'ALL', 'AMD', 'ANG', 'AOA', 'ARS', 'AUD', 'AWG', 'AZN', 'BAM', 'BBD', 'BDT', 'BGN', 'BHD', 'BIF', 'BMD', 'BND', 'BOB', 'BRL', 'BSD', 'BTN', 'BWP', 'BYR', 'BZD', 'CAD', 'CDF', 'CHF', 'CLP', 'CNY', 'COP', 'CRC', 'CUC', 'CUP', 'CVE', 'CZK', 'DJF', 'DKK', 'DOP', 'DZD', 'EGP', 'ERN', 'ETB', 'EUR', 'FJD', 'FKP', 'GBP', 'GEL', 'GGP', 'GHS', 'GIP', 'GMD', 'GNF', 'GTQ', 'GYD', 'HKD', 'HNL', 'HRK', 'HTG', 'HUF', 'IDR', 'ILS', 'IMP', 'INR', 'IQD', 'IRR', 'ISK', 'JEP', 'JMD', 'JOD', 'JPY', 'KES', 'KGS', 'KHR', 'KMF', 'KPW', 'KRW', 'KWD', 'KYD', 'KZT', 'LAK', 'LBP', 'LKR', 'LRD', 'LSL', 'LTL', 'LVL', 'LYD', 'MAD', 'MDL', 'MGA', 'MKD', 'MMK', 'MNT', 'MOP', 'MRO', 'MUR', 'MVR', 'MWK', 'MXN', 'MYR', 'MZN', 'NAD', 'NGN', 'NIO', 'NOK', 'NPR', 'NZD', 'OMR', 'PAB', 'PEN', 'PGK', 'PHP', 'PKR', 'PLN', 'PYG', 'QAR', 'RON', 'RSD', 'RUB', 'RWF', 'SAR', 'SBD', 'SCR', 'SDG', 'SEK', 'SGD', 'SHP', 'SLL', 'SOS', 'SPL', 'SRD', 'STD', 'SVC', 'SYP', 'SZL', 'THB', 'TJS', 'TMT', 'TND', 'TOP', 'TRY', 'TTD', 'TVD', 'TWD', 'TZS', 'UAH', 'UGX', 'USD', 'UYU', 'UZS', 'VEF', 'VND', 'VUV', 'WST', 'XAF', 'XCD', 'XDR', 'XOF', 'XPF', 'YER', 'ZAR', 'ZMW', 'ZWD', 'BTC')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of InvoiceItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in child_items (list)
        _items = []
        if self.child_items:
            for _item in self.child_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['childItems'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in audit_logs (list)
        _items = []
        if self.audit_logs:
            for _item in self.audit_logs:
                if _item:
                    _items.append(_item.to_dict())
            _dict['auditLogs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of InvoiceItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "invoiceItemId": obj.get("invoiceItemId"),
            "invoiceId": obj.get("invoiceId"),
            "linkedInvoiceItemId": obj.get("linkedInvoiceItemId"),
            "accountId": obj.get("accountId"),
            "childAccountId": obj.get("childAccountId"),
            "bundleId": obj.get("bundleId"),
            "subscriptionId": obj.get("subscriptionId"),
            "productName": obj.get("productName"),
            "planName": obj.get("planName"),
            "phaseName": obj.get("phaseName"),
            "usageName": obj.get("usageName"),
            "prettyProductName": obj.get("prettyProductName"),
            "prettyPlanName": obj.get("prettyPlanName"),
            "prettyPhaseName": obj.get("prettyPhaseName"),
            "prettyUsageName": obj.get("prettyUsageName"),
            "itemType": obj.get("itemType"),
            "description": obj.get("description"),
            "startDate": obj.get("startDate"),
            "endDate": obj.get("endDate"),
            "amount": obj.get("amount"),
            "rate": obj.get("rate"),
            "currency": obj.get("currency"),
            "quantity": obj.get("quantity"),
            "itemDetails": obj.get("itemDetails"),
            "catalogEffectiveDate": obj.get("catalogEffectiveDate"),
            "childItems": [InvoiceItem.from_dict(_item) for _item in obj.get("childItems")] if obj.get("childItems") is not None else None,
            "auditLogs": [AuditLog.from_dict(_item) for _item in obj.get("auditLogs")] if obj.get("auditLogs") is not None else None
        })
        return _obj

# TODO: Rewrite to not use raise_errors
InvoiceItem.model_rebuild(raise_errors=False)

