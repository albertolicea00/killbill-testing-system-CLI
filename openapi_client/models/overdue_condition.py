# coding: utf-8

"""
    Kill Bill

    Kill Bill is an open-source billing and payments platform

    The version of the OpenAPI document: 0.24.5
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, field_validator
from pydantic import Field
from openapi_client.models.duration import Duration
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class OverdueCondition(BaseModel):
    """
    OverdueCondition
    """ # noqa: E501
    time_since_earliest_unpaid_invoice_equals_or_exceeds: Optional[Duration] = Field(default=None, alias="timeSinceEarliestUnpaidInvoiceEqualsOrExceeds")
    control_tag_inclusion: Optional[StrictStr] = Field(default=None, alias="controlTagInclusion")
    control_tag_exclusion: Optional[StrictStr] = Field(default=None, alias="controlTagExclusion")
    number_of_unpaid_invoices_equals_or_exceeds: Optional[StrictInt] = Field(default=None, alias="numberOfUnpaidInvoicesEqualsOrExceeds")
    response_for_last_failed_payment: Optional[List[StrictStr]] = Field(default=None, alias="responseForLastFailedPayment")
    total_unpaid_invoice_balance_equals_or_exceeds: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="totalUnpaidInvoiceBalanceEqualsOrExceeds")
    __properties: ClassVar[List[str]] = ["timeSinceEarliestUnpaidInvoiceEqualsOrExceeds", "controlTagInclusion", "controlTagExclusion", "numberOfUnpaidInvoicesEqualsOrExceeds", "responseForLastFailedPayment", "totalUnpaidInvoiceBalanceEqualsOrExceeds"]

    @field_validator('control_tag_inclusion')
    def control_tag_inclusion_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AUTO_PAY_OFF', 'AUTO_INVOICING_OFF', 'OVERDUE_ENFORCEMENT_OFF', 'WRITTEN_OFF', 'MANUAL_PAY', 'TEST', 'PARTNER', 'AUTO_INVOICING_DRAFT', 'AUTO_INVOICING_REUSE_DRAFT'):
            raise ValueError("must be one of enum values ('AUTO_PAY_OFF', 'AUTO_INVOICING_OFF', 'OVERDUE_ENFORCEMENT_OFF', 'WRITTEN_OFF', 'MANUAL_PAY', 'TEST', 'PARTNER', 'AUTO_INVOICING_DRAFT', 'AUTO_INVOICING_REUSE_DRAFT')")
        return value

    @field_validator('control_tag_exclusion')
    def control_tag_exclusion_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('AUTO_PAY_OFF', 'AUTO_INVOICING_OFF', 'OVERDUE_ENFORCEMENT_OFF', 'WRITTEN_OFF', 'MANUAL_PAY', 'TEST', 'PARTNER', 'AUTO_INVOICING_DRAFT', 'AUTO_INVOICING_REUSE_DRAFT'):
            raise ValueError("must be one of enum values ('AUTO_PAY_OFF', 'AUTO_INVOICING_OFF', 'OVERDUE_ENFORCEMENT_OFF', 'WRITTEN_OFF', 'MANUAL_PAY', 'TEST', 'PARTNER', 'AUTO_INVOICING_DRAFT', 'AUTO_INVOICING_REUSE_DRAFT')")
        return value

    @field_validator('response_for_last_failed_payment')
    def response_for_last_failed_payment_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in ('INVALID_CARD', 'EXPIRED_CARD', 'LOST_OR_STOLEN_CARD', 'DO_NOT_HONOR', 'INSUFFICIENT_FUNDS', 'DECLINE', 'PROCESSING_ERROR', 'INVALID_AMOUNT', 'DUPLICATE_TRANSACTION', 'OTHER'):
                raise ValueError("each list item must be one of ('INVALID_CARD', 'EXPIRED_CARD', 'LOST_OR_STOLEN_CARD', 'DO_NOT_HONOR', 'INSUFFICIENT_FUNDS', 'DECLINE', 'PROCESSING_ERROR', 'INVALID_AMOUNT', 'DUPLICATE_TRANSACTION', 'OTHER')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of OverdueCondition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_since_earliest_unpaid_invoice_equals_or_exceeds
        if self.time_since_earliest_unpaid_invoice_equals_or_exceeds:
            _dict['timeSinceEarliestUnpaidInvoiceEqualsOrExceeds'] = self.time_since_earliest_unpaid_invoice_equals_or_exceeds.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of OverdueCondition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timeSinceEarliestUnpaidInvoiceEqualsOrExceeds": Duration.from_dict(obj.get("timeSinceEarliestUnpaidInvoiceEqualsOrExceeds")) if obj.get("timeSinceEarliestUnpaidInvoiceEqualsOrExceeds") is not None else None,
            "controlTagInclusion": obj.get("controlTagInclusion"),
            "controlTagExclusion": obj.get("controlTagExclusion"),
            "numberOfUnpaidInvoicesEqualsOrExceeds": obj.get("numberOfUnpaidInvoicesEqualsOrExceeds"),
            "responseForLastFailedPayment": obj.get("responseForLastFailedPayment"),
            "totalUnpaidInvoiceBalanceEqualsOrExceeds": obj.get("totalUnpaidInvoiceBalanceEqualsOrExceeds")
        })
        return _obj


